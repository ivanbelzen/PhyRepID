'''
PhyRepId pipeline
August 2018 

After Pfam domain detection, fork of normal Snakefile
Run MEME on all OGs that do not have pfam domain repeats

Mapping and paths defined in pipeline methods
Note, progressive filtering so script requires staged running 
TODO: find another solution for this.
'''
import pipeline_methods as pre
import glob

# Determine lists of OG ids and OG-hit ids to run pipeline on
# All OGs minus those with Pfam repeats

og_id_list = [] #genetree_gene
with open(pre.genes_to_genetrees_file,'r') as g2gt:
	g2gt_mapping = json.load(g2gt)
og_id_list = [y+"_"+x for x,y in g2gt_mapping.items()]

pfam_ogs = [x[len(pre.pfam_aligned_path):-len('.linsi.fa')] for x in glob.glob(pre.pfam_aligned_path+"*.linsi.fa")]

meme_input_set = [og_id for og_id in og_id_list if og_id not in pfam_ogs ]	
print('Run meme on OGs that do NOT have a Pfam repeat: ',len(meme_input_set), ' (',len(pfam_ogs), 'Pfam OGs)')


#Progressively smaller sets to run on
## TODO: resolve this

meme_ogs = [x[len(pre.fasta_chopped_path):-len('.fa')] for x in glob.glob(pre.fasta_chopped_path+"*.fa")]
print(len(meme_ogs))

meme_ogs_parsed = [x[len(pre.denovo_meme_repeats_path):-len('.fa')] for x in glob.glob(pre.denovo_meme_repeats_path+"*.fa")]
print(len(meme_ogs_parsed))

meme_ogs_filtered = [x[len(pre.denovo_repeats_path):-len('.fa')] for x in glob.glob(pre.denovo_repeats_path+"*.fa")]
print(len(meme_ogs_filtered)) 

	
rule all:
	input:
		expand(pre.progress_path+"{og_id}.chopped_fasta.done", og_id=meme_input_set),
		expand(pre.meme_output_path+"{og_id}/meme.html", og_id=meme_ogs),
		expand(pre.progress_path+"{og_id}.meme_parse_chop.done", og_id=meme_ogs),
		expand(pre.progress_path+"{og_id}.meme_filter_chop.done", og_id=meme_ogs_parsed),
		expand(pre.progress_path+"{og_id}.meme_hmm.done", og_id=meme_ogs_filtered)
			
rule mask_sequences:
	input:
		hmm = pre.pfam_hmm_path+"{og_id}.tblout", fasta = pre.fasta_path+"{og_id}.fa"
	output:
		pre.progress_path+"{og_id}.chopped_fasta.done"
	shell:
		'python parse_tblout_denovo_chop.py {input.hmm} {input.fasta}; touch {output}' 
	
rule run_meme_detection:
	input:
		pre.fasta_chopped_path+"{og_id}.fa"
	output:
		pre.meme_output_path+"{og_id}/meme.html"
	shell:
		'meme {input} -oc '+pre.meme_output_path+'{wildcards.og_id} -protein -mod anr -minsites 4 -minw 12 -maxw 30 -time 300 -maxiter 10 -nostatus -maxsize 10000000'

rule parse_meme:
	input:
		pre.meme_output_path+"{og_id}/meme.html"
	output:
		pre.progress_path+"{og_id}.meme_parse_chop.done"
	shell:
		'python parse_meme_output.py {input}; touch {output}'

rule select_repeats:
	input: 
		pre.denovo_meme_repeats_path+"{og_id}.fa"
	output:
		pre.progress_path+"{og_id}.meme_filter_chop.done"
	shell:
		'mafft --quiet --localpair --maxiterate 1000 {input} > '+pre.denovo_aligned_path+'{wildcards.og_id}.linsi.fa; \
		hmmbuild --fast --symfrac 0.6 -n \'motif\' '+pre.denovo_hmm_path+'{wildcards.og_id}.hmm '+pre.denovo_aligned_path+'{wildcards.og_id}.linsi.fa; \
		hmmpress -f '+pre.denovo_hmm_path+'{wildcards.og_id}.hmm; \
		hmmscan --domT 0 --domtblout '+pre.denovo_tblout_path+'{wildcards.og_id}.tblout '+pre.denovo_hmm_path+'{wildcards.og_id}.hmm '+pre.fasta_path+'{wildcards.og_id}.fa &>/dev/null; \
		python parse_denovo_tblout_init.py '+pre.denovo_tblout_path+'{wildcards.og_id}.tblout '+pre.fasta_path+'{wildcards.og_id}.fa; \
		touch {output}'  

rule repeat_detection_iteration:
	input:
		pre.denovo_repeats_path+"{og_id}.fa"
	output: 
		pre.progress_path+"{og_id}.meme_hmm.done"
	shell: 
		'bash run_meme_iteration.sh {input}' 	
